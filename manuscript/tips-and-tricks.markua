# TODO Tips and tricks

## Headline export levels

`H` option: <https://orgmode.org/manual/Export-Settings.html> 

## org-special-ctrl-a/e/k

## Visual configuration

{id: "code-block-execution"}
## Code block execution and output processing

One of the powerful aspects of Org is the ability to store code blocks in a document, execute them on the fly, and insert the code, their output, or both into the document. This is an ability that I have used frequently in this book, and I would like to show you a couple of additional examples. 

The list of block samples in [Appendix A: Block types](#appendix-block-types) is in fact generated by the Emacs-LISP code below. This code gets the list of supported blocks at runtime from the `ox-leanpub` module, in the variable `org-leanpub-markua--block-defs`. This variable stores the definition of the mappings from Org blocks to Markua rendering, so we extract the names of the blocks, using `(mapcar #'car ...)`, sort the list, and then build a list of strings containing the necessary Org syntax to generate the block samples. 

{format: "emacs-lisp", id: "block-samples"}
```
(mapconcat
 (lambda (b)
   (format "#+begin_%s
%s block, produced by:\\\\
=#+begin_%s=\\\\
=...=\\\\
=#+end_%s=\\\\
#+end_%s" b (upcase-initials b) b b b))
 (sort (mapcar #'car org-leanpub-markua--block-defs)
       #'string-lessp)
 "\n")
```

If you look at the source file of this text, you will see that the source block has the following headers: 

{format: "org"}
```
#+name: block-samples
#+begin_src emacs-lisp :results drawer :exports both
```

The `#+name` line allows us to insert the results of the block somewhere else in the file (instead of right below the source block, as is the default) by inserting the following line where we want the results to go: 

{format: "org"}
```
#+RESULTS: block-samples
```

{blurb, class: "tip"}
If you look at the source of Appendix A, you will see that line.
{/blurb}

The `:results drawer` part of the header tells Org that the results should be enclosed in a [drawer](https://orgmode.org/manual/Drawers.html) - this is a grouping mechanism that allows the results to be enclosed in a group-like construct, but still be considered as part of the Org document, so that they are rendered as part of the book you are reading. There are multiple possible values for the [`:results`](https://orgmode.org/manual/Results-of-Evaluation.html) header, depending on what and how you want its results to be interpreted. 

The `:exports both` header makes it so that you can see the code above, as well as its results in Appendix A. You can choose `both`, `code`, `results` or `none` as values to [`:exports`](https://orgmode.org/manual/Exporting-Code-Blocks.html), depending on what you want in the exported document. 

Similarly, the table of default blocks in [Block elements](#block-elements) is also generated programmatically by the code below. Note that we are also getting the information from the `org-leanpub-markua--block-defs` variable, but in this case we are extracting not only the name but also its definition, which is used to construct the details of each block type. 

{format: "emacs-lisp", id: "block-table"}
```
(let ((blocks (cl-sort
               (cl-copy-seq org-leanpub-markua--block-defs)
               #'string-lessp :key #'car)))
  (concat
   ;; Table header is fixed
   "| Block type | Gets exported as |
|------------+------------------|\n"
   ;; Table rows are computed
   (mapconcat
    (lambda (block-def)
      (cl-destructuring-bind (src-blk dst-blk dst-attrs) block-def
        (format "| =#+begin/end_%s= | =%s= |" src-blk
                (org-leanpub-markua--attr-str dst-attrs dst-blk))))
    blocks
    "\n")))
```



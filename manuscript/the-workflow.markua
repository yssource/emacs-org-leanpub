# The workflow

Now that you have finished the initial setup of your book, let us look into more detail into the overall workflow you will follow as you write, preview and publish your book, throughout its whole lifecycle. You may remember our overall workflow diagram from [The process](#e927b31d-a47d-4988-a5bc-015d91061596): 

{width: "50%"}
![](images/high-level-workflow.png) 

## Writing

You write your book in Org mode, using the whole range of supported Org markup syntax and features. If you are not familiar with Org yet, I suggest you start at the excellent [orgmode.org](https://orgmode.org/) website for an overview of its features, and that you use the [Org mode manual](https://orgmode.org/manual/) for reference into its details. You can use text formatting markup (*italics*, **bold**, `verbatim`, etc.) tables, code blocks, example blocks, lists of different types, headlines, and more. Most constructs will be correctly exported into Markua format. 

There are a few Leanpub-specific features that you can use in your Org document. 

{blurb, class: "tip"}
The descriptions below focus on exporting to Leanpub's [Markua](https://leanpub.com/markua/read) format. I **strongly** encourage you to use it; not all the features may be supported if exporting to Leanpub Flavored Markdown (LFM).
{/blurb}

### Chapters and parts

Normally, a level-1 Org heading (preceded by a single asterisk): 

{format: "text"}
```
* This is a chapter
```

Is exported as a Markua chapter: 

{format: "text"}
```
# This is a chapter
```

However, Markua also supports [parts](https://leanpub.com/markua/read#headings), which are used to denote higher-level groupings of chapters. You can denote a level-1 heading that should be exported as a part by tagging it with `part`. For example: 

{format: "text"}
```
* Part one: the beginning :part:
```

Is exported in Markua as: 

{format: "text"}
```
# Part one: the beginning #
```

### Directives

In Markua, you can use special [directives](https://leanpub.com/markua/read#directives) to denote the book's front-, main- and backmatter sections, which has an impact on how they are numbered and displayed in the table of contents. You can specify these directives by tagging the corresponding level-1 heading (it can be either a chapter or a part heading) with the `frontmatter`, `mainmatter` and `backmatter` tags, respectively. For example: 

{format: "text"}
```
* Preface :frontmatter:

  ...

* Chapter one :mainmatter:

  ...

* Appendix one :backmatter:
```

Will be exported as: 

{format: "text"}
```
{frontmatter}
# Preface

  ...

{mainmatter}
# Chapter one

  ...

{backmatter}
# Appendix one
```

### Conditional book and sample inclusion

Individual sections can be marked for inclusion in your book's sample by tagging them with `sample`. For example: 

{format: "text"}
```

```

{format: "text"}
```
* Preface to the book sample :sample:nobook:
```

Is exported as: 

{format: "text"}
```
{sample: true, book: false}
# Preface to the book sample
```

{id: "block-elements"}
### Block elements

Leanpub supports a few different [block elements](https://leanpub.com/markua/read#leanpub-auto-block-elements) with different semantic meanings. The following are all supported by `ox-leanpub`: 

| Block type                | Gets exported as                |
|------------------------- |------------------------------- |
| `#+begin/end_aside`       | `{aside}`                       |
| `#+begin/end_blockquote`  | `{blockquote}`                  |
| `#+begin/end_blurb`       | `{blurb}`                       |
| `#+begin/end_center`      | `{blurb, class: "center"}`      |
| `#+begin/end_discussion`  | `{blurb, class: "discussion"}`  |
| `#+begin/end_error`       | `{blurb, class: "error"}`       |
| `#+begin/end_exercise`    | `{blurb, class: "exercise"}`    |
| `#+begin/end_information` | `{blurb, class: "information"}` |
| `#+begin/end_note`        | `{blurb, class: "information"}` |
| `#+begin/end_question`    | `{blurb, class: "question"}`    |
| `#+begin/end_quote`       | `{blockquote}`                  |
| `#+begin/end_tip`         | `{blurb, class: "tip"}`         |
| `#+begin/end_warning`     | `{blurb, class: "warning"}`     |

{blurb, icon: "laptop-code"}
This table is generated programmatically! See the code in [Code block execution and output processing](#code-block-execution).
{/blurb}

{blurb, class: "tip"}
You can see samples of these blocks in [Appendix B](#appendix-block-types).
{/blurb}

You can specify a [custom icon](https://leanpub.com/markua/read#leanpub-auto-using-extension-attributes-on-blurbs-to-add-icon-support) for any block using the `:icon` attribute in an `#+ATTR_LEANPUB` line. For example: 

{format: "org"}
```
#+ATTR_LEANPUB: :icon github
#+begin_tip
Tip with a GitHub icon instead of the default.
#+end_tip
```

{blurb, icon: "github", class: "tip"}
Tip with a GitHub icon instead of the default.
{/blurb}

You can change the default icon for a block for the whole document, or you can even define your own block types, by using `#+MARKUA_BLOCK` lines. The syntax is: 

{format: "org"}
```
#+MARKUA_BLOCK: blockname [:class classname] [:icon iconname]
```

Where `blockname` and at least one of `:class` or `:icon` needs to be specified: 

* `blockname` is the name of the block to define. Can be one of the existing block names (to redefine it) or a new one.
* `classname` (optional) is the name of an existing supported Markua block class (as listed in the table above). It can be omitted to use a plain `{blurb}` block.
* `iconname` (optional) is a [valid icon name](https://leanpub.com/markua/read#leanpub-auto-using-extension-attributes-on-blurbs-to-add-icon-support) to use for the block.

For example, you could change the default icon of `tip` blocks to be a lightbulb instead of the default key icon: 

{format: "org"}
```
#+MARKUA_BLOCK: tip :class tip :icon lightbulb

#+begin_tip
Tip with a lightbulb!
#+end_tip
```

{blurb, icon: "lightbulb", class: "tip"}
Tip with a lightbulb!
{/blurb}

We can also define a completely new block type: 

{format: "org"}
```
#+MARKUA_BLOCK: leanpub :icon leanpub

#+begin_leanpub
Leanpub block!
#+end_leanpub
```

{blurb, icon: "leanpub"}
Leanpub block!
{/blurb}

{id: "block-captions"}
#### Block captions

If a `#+CAPTION` is specified for a block, it is exported as a headline at the top of the block. By default, the level of the headline is one below the current level (e.g. if the block is under a level-2 headline, its caption will be produced as a level-3 headline). You can configure this for the whole document by setting the `#+MARKUA_BLOCK_CAPTION_LEVEL` option, or for individual blocks by specifying the `:caption-level` option in the `#+ATTR_LEANPUB` line. Valid values for this option are: 

* `same`: the caption will be produced as a same-level headline;
* A number 1-9: the caption will be produced as a headline of the specified level;
* `below` (or anything else): default behavior, caption will be produced at one level below the current one.

For example: 

{format: "org"}
```
#+caption: Default caption level
#+begin_information
This is a block with the default caption level.
#+end_information

#+caption: Fixed level-2 caption
#+attr_leanpub: :caption-level 2
#+begin_information
This block's headline will be bigger!
#+end_information
```

{blurb, class: "information", caption: "Default caption level"}
##### Default caption level
This is a block with the default caption level.
{/blurb}

{blurb, class: "information", caption: "Fixed level-2 caption"}
## Fixed level-2 caption
This block's headline will be bigger!
{/blurb}

### Code blocks

Org has extensive facilities for [working with source code](https://orgmode.org/manual/Working-with-Source-Code.html#Working-with-Source-Code). By far, any code blocks you include in your Org document will be properly recognized and typeset by Leanpub. The only difference might be in syntax highlighting support. Leanpub [uses Pygments](https://leanpub.com/markua/read#code) for syntax highlighting, one of the most extensive syntax highlighting programs. However, Emacs does its own, and there are many languages supported by Emacs (including syntax highlighting) that are not included in Pygments. In those cases, you will see syntax highlighting in your code blocks in Emacs, but they will be rendered as plain text by Leanpub. 

### Leanpub attributes

Both [Markua](https://leanpub.com/markua/read#attributes) and [LFM](https://leanpub.com/lfm/read#leanpub-auto-attributes) support specifying attributes for different elements using *attribute lines*. We have seen already how some Org constructs automatically get converted into attributes (e.g. `#+caption` ). 

Both `ox-leanpub-markua` and `ox-leanpub-markdown` support specifying attributes as follows: 

* An element's `#+NAME`, `ID` or `CUSTOM_ID`, if specified, are used for the `id` attribute.
* An element's `#+CAPTION`, if specified, is used for the `caption` attribute in Markua and the `title` attribute in LFM (see [Block Captions](#block-captions) for details of how captions are produced in block elements).
* Other attributes can be specified in an `#+ATTR_LEANPUB` line before the corresponding element. The syntax is the same as for Org header arguments. These are merged with the previous ones if specified. Attributes specified in `#+ATTR_LEANPUB` override those specified through other mechanisms.

Example: 

{format: "org"}
```
#+name: system-diagram
#+caption: Architecture diagram
#+attr_leanpub: :width 30%
[[file:images/diagram.png]]
```

Gets exported in Markua as: 

{format: "text"}
```
{width: "30%", id: "system-diagram", caption: "Architecture diagram"}
![Architecture diagram](images/diagram.png)
```

And in LFM as: 

{format: "text"}
```
{width="30%", id="system-diagram", title="Architecture diagram"}
![Architecture diagram](images/diagram.png)
```

### Other Markua and LFM elements

If you want to include text that gets passed as-is to the Leanpub backend, you can use `#+markua` / `#+markdown` lines, or `export` blocks of the corresponding type. For example, Org does not have a construct to specify a page break, but you can specify Leanpub's `{pagebreak}` directive like this: 

{format: "org"}
```
#+markua: {pagebreak}
```

Or like this: 

{format: "org"}
```
#+begin_export markua
{pagebreak}
#+end_export
```

For including code in LFM you can use similar constructs, using `markdown` instead of `markua`. 

## Exporting and Previewing

Whenever you have some text that you want to preview or publish, you need to export it using the corresponding backend, Markua or LFM. 

{blurb, class: "tip"}
As I have said a few times before, I strongly recommend you use Markua. Assuming your original text is kept in Org format, there is no reason to use LFM, since the full range of Leanpub constructs is available through Markua.
{/blurb}

The basic export procedure is as described in [Your first book export](#2dc0dd10-cc01-4c41-8f3f-38b47aa8ab75). Normally, you would use the `[b] Book: Whole book` option, which creates both the `Book.txt` and `Subset.txt` files. If you only want to export the subset files, you can use the `[s] Book: Subset` option. 

However, you can produce different types of exports. Leanpub's [Subset preview](http://help.leanpub.com/en/articles/3025574-i-only-want-to-do-preview-of-a-specific-part-of-my-book-how-do-i-so-a-subset-preview) can be particularly useful if you want to do a quick preview of some parts of your book in PDF, without producing all the other supported formats. This results in a much shorter rendering time, which allows you to preview and iterate much faster. 

The `manuscript/Subset.txt` file determines which parts of the book should be included in the subset preview. When using `ox-leanpub`, its contents can be determined in several ways: 

* By default, `Subset.txt` is not generated.
* If you specify the `#+leanpub_book_write_subset` property in your file, you can configure the default subset export for your book, depending on its value: 
  * `none` (default): not created.
  * `tagged`: use all chapters tagged `subset`.
  * `all`: use the same chapters as `Book.txt`.
  * `sample`: use same chapters as `Sample.txt`.
  * `current`: export the current chapter (where the cursor is at the moment of the export) as the contents of `Subset.txt`.
* If you press `C-s` in Org's export screen to toggle the *Export scope* parameter to "Subtree", the `Subset.txt` file will contain only the current chapter (the one in which the cursor is when you do the export) regardless of the value of `#+leanpub_book_write_subset`. This is useful to do a quick preview as you are working on a single chapter.

Once you have exported your book, you have to commit the changes to your git repository, and push the changes to GitHub. For example, as I type this, I have executed the following commands: 

{format: "console"}
```
$ git commit -a -m 'Latest changes to "Workflow" chapter.'
[master d25f22a] Latest changes to "Workflow" chapter.
 3 files changed, 44 insertions(+), 6 deletions(-)
$ git push
Enumerating objects: 11, done.
Counting objects: 100% (11/11), done.
Delta compression using up to 12 threads
Compressing objects: 100% (6/6), done.
Writing objects: 100% (6/6), 2.16 KiB | 2.16 MiB/s, done.
Total 6 (delta 5), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (5/5), completed with 5 local objects.
To https://github.com/zzamboni/emacs-org-leanpub.git
   2c67f01..d25f22a  master -> master
```

Once you have pushed your changes, you can generate the preview in one of two ways: 

* If you have set up a web hook as described in [Creating the book on Leanpub](#creating-the-book-on-leanpub), or by using one of the techniques described in [Automation](#2a82317f-54f7-4dec-b7a2-d5497d186716), your preview will be triggered automatically when you push to the repository.
* Through Leanpub's web UI, you can trigger a preview from the "Preview New Version" screen in your book's management screen. You can select the type of preview you want to generate, and then click the "Create Preview" button. Once the preview is generated, you can download it from the links in that same screen. If you have configured Dropbox integration, the generated files will also be placed in your Dropbox folder. 
  
  {width: "30%"}
  ![](images/leanpub-create-preview.png)

## Publishing



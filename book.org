:DOC_CONFIG:
#+startup: indent logdrawer
#+tags: noexport sample frontmatter mainmatter backmatter
#+options: toc:nil tags:nil
#+todo: TODO(t) DRAFT(f@/!) | DONE(d!) CANCELED(c)

# Subset Preview includes all chapters, that way I can use it to do a
# quick preview of the PDF without having to wait for EPUB/MOBI
# versions in a Full Preview.
#+leanpub_book_write_subset: all

# This block is used to clean up source blocks that get executed
# through the script command, for the purposes of including both the
# commands and their output in the export. This is to be used through
# the :post argument in a src block, like this:
# #+begin_src sh :exports output :wrap "src console" :post cleanup(data=*this*)
# script <<EOF
#   echo 1
#   echo 2
#   more commands
# EOF
# #+end_src

#+NAME: cleanup
#+BEGIN_SRC emacs-lisp :var data="" :results value :exports none
  (delete-file "typescript")
  (replace-regexp-in-string
   (rx (seq "$ exit" (zero-or-more (group anything)) eol))
   ""
   (replace-regexp-in-string
    (rx (seq bol "bash-" (zero-or-more nonl) "$"))
    "$"
    (replace-regexp-in-string
     (rx (seq (group (*\? (group anything)))
              "$"
              (zero-or-more (group anything)) eos))
     ""
     (replace-regexp-in-string "" "" data) nil nil 1)))
#+END_SRC

# This block can be used to read the contents of the typescript file
# and clean it up. I have used it when inserting the output of the
# command fails for some reason and I am left with the output in the
# typescript file, to avoid having to execute the command again.

#+begin_src emacs-lisp
  (defun get-string-from-file (filePath)
    "Return filePath's file content."
    (with-temp-buffer
      (insert-file-contents filePath)
      (buffer-string)))
  (let ((data (get-string-from-file "./typescript")))
    (replace-regexp-in-string
     (rx (seq "$ exit" (zero-or-more (group anything)) eol))
     ""
     (replace-regexp-in-string
      (rx (seq bol "bash-" (zero-or-more nonl) "$"))
      "$"
      (replace-regexp-in-string
       (rx (seq (group (*\? (group anything)))
                "$"
                (zero-or-more (group anything)) eos))
       ""
       (replace-regexp-in-string "" "\n" data) nil nil 1))))
#+end_src

# The following property declarations make it the default to
# postprocess sh blocks through the cleanup block above, and also
# automatically wrap them in the script command.

#+property: header-args:sh+ :exports output
#+property: header-args:sh+ :results output
#+property: header-args:sh+ :wrap "src console"
#+property: header-args:sh+ :post cleanup(data=*this*)
#+property: header-args:sh+ :prologue "SHELL=/bin/bash script -q <<EOF" :epilogue "EOF"

:END:

#+title: Writing and publishing with Emacs, org-mode and Leanpub
#+author: Diego Zamboni

* Preface to the early release :frontmatter:
:PROPERTIES:
:EXPORT_FILE_NAME: manuscript/preface-to-the-early-release.markua
:END:

What you are reading is an early release of this book, which means its contents is not yet complete, and you may find errors or omissions in it. Still, I hope you find it useful. I would very much appreciate your feedback! Please let me know what you liked, what you didn't like, and what additional topics you would like me to cover. Please send me a message through the [[https://leanpub.com/emacs-org-leanpub/email_author/new][/Email the Author/]] page and let me know what you think.

** Release notes

*** June 2020

This is the initial release of the book! I would love to hear your thoughts. There is still much missing but the core of the book is there, and you can probably already use it to get started writing a book and publishing it on Leanpub using Emacs and Org-mode.

* Introduction :mainmatter:
:PROPERTIES:
:EXPORT_FILE_NAME: manuscript/introduction.markua
:END:

Publishing your words has never been easier than it is today. For a long time, getting a book published was a long and arduous process, in which you had to go through multiple gatekeepers to even have a chance to see your words on paper. Today, blogging means you can have your words read by thousands of people within minutes of writing them. Even publishing a book has become considerably easier through self publishing. There are many tools and publishers that allow you to get started for little or no money. Still, *getting started* can be confusing, and that is what this book is about.

In this book, I will show you the workflow and tools I use to publish [[https://leanpub.com/u/zzamboni][my books]]. This toolset is geared towards technical writing, which is what I do, but can just as well be used for any other style. The three main tools involved are:

- The [[https://www.gnu.org/software/emacs/][GNU Emacs]] editor together with  [[https://orgmode.org/][Org mode]]  for writing, editing and exporting your text;
- [[https://github.com/][GitHub]] to store your book files.
- [[https://leanpub.com/][Leanpub]] for typesetting, previewing, publishing and selling your work.

The following are optional, but highly recommended for making the workflow more automated and consistent:

- [[https://circleci.com/][CircleCI]] (or other CI/CD tool) for automating the typesetting, previewing and publication process;
- [[http://www.hammerspoon.org/][Hammerspoon]] (if you are using a Mac) for monitoring book builds.

To illustrate the process and provide you with a starting point, the source repository for this book is available at https://github.com/zzamboni/emacs-org-leanpub. I am populating the repository live as I write this book, and you can follow the progress there and by getting the book for free at https://leanpub.com/emacs-org-leanpub. In the repository you can see all the "behind the scenes" text and configuration, and follow along as I describe them to you.

There are as many possible variations to this workflow as users out there. If you have any suggestions or tips that you think should be mentioned, please feel free to let me know! Send me a note or even better, submit a pull request at the book's GitHub repository. Let's make the book better together!

** The process

The high-level workflow for publishing a book using Emacs, org-mode and Leanpub looks like this:

#+attr_leanpub: :width 30%
#+RESULTS: workflow-diagram
[[file:./images/high-level-workflow.png]]

In this setup, the only files you manipulates directly are your source files. For your text, you use Emacs with org-mode. In many cases, you can also generate figures from within Org mode, if they can be programmatically produced. Emacs exports your Org files into the structure and format required by Leanpub, and you commit the result to a Git repository (Leanpub at the moment supports GitHub and Bitbucket). From there, Leanpub picks up the files and produces a preview of your book, which you can review to make further changes. When you want to publish your work, you instruct Leanpub to do so, and Leanpub takes care of producing the end result and publishing it for the word to see.

#+begin_tip
One of Org-mode's amazing features is its ability to evaluate code within the source file and include the code, its output or both in the resulting document. For example, the graph you see above is produced by evaluating the following code using the =dot= command from the [[https://graphviz.org/][Graphviz]] package. Whenever I need to update the diagram, I type the changes directly in the document and press ~C-c C-c~ within the code block. Org-mode automatically renders the diagram and updates the figure in the document.
#+name: workflow-diagram
#+begin_src dot :file "./images/high-level-workflow.png" :exports both
  digraph {
     rankdir=TB;
     node [fontname="DejaVu Sans"];
     edge [fontname="DejaVu Sans"];
     files [label="Source files\n(Org doc, figures, etc.)", shape=oval];
     emacs [label="Emacs + org-mode",
            fillcolor=purple, fontcolor=white, style=filled, shape=box];
     manuscript [label="Leanpub manuscript\n(Markua + other files)",
                 fillcolor=yellow, style=filled, shape=oval];
     leanpub [label="Leanpub",
              fillcolor=blue, fontcolor=white, style=filled, shape=box];
     git [label="Git repo", fillcolor=red, style=filled, shape=box];
     preview [label="Book preview",
              fillcolor=grey, style=filled, shape=oval];
     book [label="Book (PDF,\nePub, mobi, online)",
           shape=oval, fillcolor=green, style=filled];
     files -> emacs      [label="Edit"];
     emacs -> manuscript [label="Export"];
     manuscript -> git   [label="Commit"];
     git -> leanpub      [label="Typeset"];
     leanpub -> book     [label="Publish"];
     book -> emacs       [label="Update"];
     leanpub -> preview  [label="Preview"];
     preview -> emacs    [label="Update"];
  }
#+end_src
#+end_tip
** Leanpub

[[https://leanpub.com/][Leanpub]] is a powerful platform for self-publishing. It allows you to create books and courses and to publish, sell and update them directly through the Leanpub portal. It supports a comprehensive [[https://leanpub.com/help/api][API]] which allows you to automate most operations, tough you can of course do them via the web UI if you prefer.

Books and courses are written in a specialized markup language called [[https://leanpub.com/markua/read][Markua]], which is a derivative of Markdown but with some additional features that make it easier to publish longer works. Leanpub also supports [[https://leanpub.com/lfm/read][Leanpub Flavored Markdown]], which is an older version of its markup language. Markua is the recommended format, and the one we use in this book.

I personally like Leanpub not only for the technical aspect of it (self-publishing, text-based markup, the API) but also because of the company behind it. My interactions with them have always been met with helpful and constructive responses, and you can tell they genuinely care about building the best possible publishing platform.

If you are not convinced yet, read [[https://leanpub.com/authors][Why Leanpub]].

** Emacs and org-mode

[[https://www.gnu.org/software/emacs/][Emacs]] is a powerful open-source editor which runs on any platform, and offers infinite extensibility through its ability to be programmed using the embedded [[https://www.gnu.org/software/emacs/manual/html_node/elisp/index.html][Emacs LISP]] programming language. If you are not familiar with Emacs, check out the [[https://www.gnu.org/software/emacs/tour/][Guided Tour of Emacs]] to get started.

The setup described in this book is based on [[https://orgmode.org/][Org mode]], an incredibly powerful markup language and set of tools that allows keeping notes, tracking tasks, and writing documents. One of its key features is the concept of /Exporters/: the same Org document can be exported in a multitude of formats using any of the built-in exporters or a wide variety of community-developed exporters.

One of these exporters is [[https://github.com/zzamboni/ox-leanpub][=ox-leanpub=]], which handles the conversion of Org markup to Leanpub's Markua or Markdown formats, and also splitting and structuring the files as expected by Leanpub. =Ox-leanpub= allows you to write your book entirely in Org mode, and completely manages the production of the necessary files for Leanpub to be able to render your book. This is the exporter we will use in this book.

Org mode is extensive and powerful, and I invite you to peruse its [[https://orgmode.org/#docs][documentation]] but to be patient --- Org is best learned gradually and over time. Discover the parts that interest you the most first, and go from there. To get started with writing using Org, you can use [[http://ergoemacs.org/emacs/emacs_org_markup.html][Xah's Org Mode Markup Cheatsheet]] to get an overview of the most useful markup constructs. For including source code in your documentation, I recomend reading the [[https://orgmode.org/manual/Working-with-Source-Code.html][Working with Source Code]] section of the Org manual, as well as Howard Abrams' [[http://howardism.org/Technical/Emacs/literate-programming-tutorial.html][Introduction to Literate Programming]].

* Setting up
:PROPERTIES:
:EXPORT_FILE_NAME: manuscript/setting-up.markua
:END:

** Signing up for Leanpub

If you don't have a Leanpub account yet, you can create it by visiting https://leanpub.com/ and clicking on the "Sign Up" link on the homepage. Note that you can also automatically create your account when you create your first book, as described in [[#creating-the-book-on-leanpub][Creating the book on Leanpub]].

Note that among Leanpub's pricing plans, only the Standard and Pro plans support the "Write on your computer, and sync with Dropbox, GitHub or Bitbucket" option, which is what we focus on in this book. If you want to enable webhooks and other automation aspects, you will need a Pro plan, which supports the "Leanpub API" option. You need to choose your pricing plan when you create your first book, but you can change it later at any time.

#+attr_leanpub: :width 40%
[[file:images/leanpub-pricing-plans.png]]

#+begin_tip
You need a Standard or Pro plan to follow along the instructions in this book.
#+end_tip

** Emacs and org-mode configuration

#+begin_src emacs-lisp :tangle files/sample-emacs-init.el :mkdirp yes :exports none
  ;; This code gets tangled to the output file so that it can be
  ;; used as a temporary init file for Emacs, but is not shown in
  ;; the book.
  (setq user-init-file (or load-file-name (buffer-file-name)))
  (setq user-emacs-directory (file-name-directory user-init-file))
#+end_src

Emacs configuration is read from =~/.emacs.d/init.el=. Let's review the minimum configuration you need to follow along this book.

#+begin_tip
We show here a bare-minimum example, but Emacs configuration is an art, and there is a lot of things you can configure to improve the usability, functionality and aesthetics of your setup. For a realistic working configuration example, check out my [[https://zzamboni.org/post/my-emacs-configuration-with-commentary/][full Emacs configuration]]. If you are an experienced Emacs user and have your configuration set up already, please check at least the [[https://zzamboni.org/post/my-emacs-configuration-with-commentary/#publishing-to-leanpub][Publishing to Leanpub]] section!

Make sure you have at least Emacs 26.1 installed, this is the minimum needed by some of the packages you use.
#+end_tip

First, we need to set up the Emacs package system, which enables you to easily install packages from various repositories. Add the following lines to your =init.el= file to declare the package repositories to use:

#+begin_src emacs-lisp :tangle files/sample-emacs-init.el :mkdirp yes
  (customize-set-variable
   'package-archives
   '(("marmalade" . "https://marmalade-repo.org/packages/")
     ("melpa"     . "https://melpa.org/packages/")
     ("elpa"     .  "https://elpa.gnu.org/packages/")))
#+end_src

Then we initialize the package system and refresh the list of packages.

#+begin_src emacs-lisp :tangle files/sample-emacs-init.el :mkdirp yes
  (package-initialize)

  (when (not package-archive-contents)
    (package-refresh-contents))
#+end_src

I highly recommend using the [[https://www.masteringemacs.org/article/spotlight-use-package-a-declarative-configuration-tool][use-package]] library to manage the packages in your config, since it allows easy, self-contained and declarative installation and configuration of packages. Since =use-package= is not bundled with Emacs, the first thing we do is install and load it by hand. All other packages are then declaratively installed and configured with =use-package=.

#+begin_src emacs-lisp :tangle files/sample-emacs-init.el :mkdirp yes
  (when (not (package-installed-p 'use-package))
    (package-install 'use-package))
  (require 'use-package)
#+end_src

Using =use-package= we can load the =org= package. This is included with Emacs.

#+begin_src emacs-lisp :tangle files/sample-emacs-init.el :mkdirp yes
    (use-package org)
#+end_src

Finally, we declare =ox-leanpub=. In this case, =use-package= installs the package thanks to the =:ensure t= declaration, and it loads it only after =org= has been loaded.

#+begin_src emacs-lisp :tangle files/sample-emacs-init.el :mkdirp yes
  (use-package ox-leanpub
    :ensure t
    :after org)
#+end_src

** Creating the book locally

#+begin_note
All the steps that follow show the actual commands and operations I performed while setting up the book you are reading! You can find the sources for the current version of this book at https://github.com/zzamboni/emacs-org-leanpub.
#+end_note

The first step is to choose a short name or /slug/ for your book. This is the URL identifier for your book in Leanpub, and it should also be the name of your git repository (this is not mandatory, but makes the automation easier). This book's slug is =emacs-org-leanpub=, so its Leanpub URL will be leanpub.com/emacs-org-leanpub.

*** Creating a git repository for your book
Once we have a slug, we create a new Git repository for the new book. Leanpub supports both GitHub and Bickbucket repositories. In these descriptions I use GitHub, but similar steps apply if you are using Bitbucket.

#+begin_tip
I use the command-line utility [[https://hub.github.com/][hub]] to interact with GitHub from the command line. You can of course do the corresponding operations through the GitHub web interface if you so prefer. If you use Bitbucket, you can use [[https://seveas.github.io/git-spindle/bitbucket.html][git-spindle]] to interact with it from the command line as well.
#+end_tip

#+begin_src console
  $ cd ~/Personal/writing
  $ mkdir -p emacs-org-leanpub
  $ cd emacs-org-leanpub
  $ git init .
  Initialized empty Git repository in
    /Users/taazadi1/Dropbox/Personal/writing/emacs-org-leanpub/.git/
#+end_src

Next, we create a new GitHub repository and connect it to our local repository:

#+begin_src console
$ cd ~/Personal/writing/emacs-org-leanpub
$ hub create
Updating origin
https://github.com/zzamboni/emacs-org-leanpub
$ git remote -v
origin	https://github.com/zzamboni/emacs-org-leanpub.git (fetch)
origin	https://github.com/zzamboni/emacs-org-leanpub.git (push)
#+end_src

*** Creating the book file

Now you can start writing your text inside the new repository. I usually write the main text in a file called =book.org= in the root directory of the repository.

To get you started, a basic skeleton for a book is the following:

#+begin_src org :tangle files/sample-book.org
  ,#+startup: indent
  ,#+tags: noexport sample frontmatter mainmatter backmatter
  ,#+options: toc:nil tags:nil

  ,#+title: Your book title
  ,#+author: Your name

  ,* Introduction

  Some text

  ,* Chapter 1

  Some more text
#+end_src

#+begin_tip
For a more complex example, you can find the sources for this book at https://github.com/zzamboni/emacs-org-leanpub.
#+end_tip

Once you have some text, you can simply commit and push the changes to your remote repository:

#+begin_src console
$ cd ~/Personal/writing/emacs-org-leanpub
$ git add book.org
$ git ci -m "Initial commit of the book"
[master (root-commit) 3e166f4] Initial commit of the book
 1 file changed, 230 insertions(+)
 create mode 100644 book.org
$ git push -u origin master
Enumerating objects: 3, done.
Counting objects: 100% (3/3), done.
Delta compression using up to 8 threads
Compressing objects: 100% (2/2), done.
Writing objects: 100% (3/3), 3.72 KiB | 3.72 MiB/s, done.
Total 3 (delta 0), reused 0 (delta 0)
To https://github.com/zzamboni/emacs-org-leanpub.git
 ,* [new branch]      master -> master
Branch 'master' set up to track remote branch 'master' from 'origin'.
#+end_src

*** Your first book export
:PROPERTIES:
:CUSTOM_ID: your-first-book-export
:END:

Now that you have the initial skeleton for your book, it's time to export it from Org to Leanpub's Markua format, from which Leanpub can produce a rendered version of your book for you to preview.

For this, we use the =ox-leanpub= module which you installed on Emacs. Pressing ~C-c C-e~ will show you Org-mode's Export screen. Among other options, you should see the following:

#+begin_example
[M] Export to Leanpub Markua
    [M] To temporary buffer       [m] To file
    [o] To file and open
    [b] Multifile: Whole book     [s] Multifile: Subset
    [c] Multifile: Current chapter
#+end_example

Press ~M b~ to export the whole book in "Multifile format", which exports your book from the Org file and creates the [[https://leanpub.com/manual/read#writing-your-book-in-github-mode][structure and files]] needed by Leanpub to render the book. For example, for this book, the following files, directories and symlinks are created (the original source file is =book.org=, everything else is created from it, note that all images stored under =manuscript/resources/images= are omitted from this listing):

#+name: book-tree
#+begin_src bash :results output :exports results :wrap example
  tree --noreport -L 3 -I 'covers|files'
#+end_src

  #+RESULTS: book-tree
  #+begin_example
  .
  ├── README.org
  ├── book.org
  ├── images -> manuscript/resources/images
  └── manuscript
      ├── Book.txt
      ├── Subset.txt
      ├── automation.markua
      ├── backmatter.txt
      ├── colophon.markua
      ├── frontmatter.txt
      ├── images -> resources/images
      ├── introduction.markua
      ├── mainmatter.txt
      ├── preface-to-the-early-release.markua
      ├── resources
      │   └── images
      ├── setting-up.markua
      ├── the-workflow.markua
      └── tips-and-tricks.markua
  #+end_example

#+begin_tip
This file tree is also generated automatically from within the book's source document, by using a simple shell command inside an Org-mode =src= block, like this:

#+begin_src org
,#+name: book-tree
,#+begin_src bash :results output :exports results :wrap example
  tree --noreport -L 3 -I 'covers|files'
,#+end_src
#+end_src
#+end_tip

In short, this is what the export operation does:

- Creates a =manuscript= folder if needed, under which all other files are stored.
  - A =resources/images= directory is created inside =manuscript=, as required by the Leanpub Markua exporter.
  - Symlinks to the =images= directory are created both from the top-level directory, and from the =manuscript= directory, to allow referencing the same image files both from the Org file and from the exported Markua files.
- Exports one =.markua= file for each top-level header (chapter) in your book.
- Creates the =Book.txt= file with the filenames corresponding to the chapters of your book.
  - Depending on the exporter settings, the =Subset.txt= and =Sample.txt= files may also be created.

** Creating the book on Leanpub
:PROPERTIES:
:CUSTOM_ID: creating-the-book-on-leanpub
:END:

Now that you have the basics of a book, you need to create a new book in Leanpub and link it to your Git repository. Assuming you are signed into your Leanpub account, you can do this by visiting https://leanpub.com/create/book, and following the prompts. In particular, note the following:

#+begin_warning
Leanpub's pricing plans changed in October 2019, making it necessary to have a "Standard" or "Pro" plan to be able to write your book using Git integrations.
#+end_warning

- The "On your computer" option under "Where do you want to write" is only available in the paid Leanpub plans. Choose the corresponding git option, and enter the path to your repository as created above.
- I suggest you use the same name for the "Book URL" and for your Git repository. This is not mandatory, but it makes some of the automation easier (particularly for integration with CI/CD systems).
- I personally like to enable "Send output to Dropbox" to always have the latest rendered version of my books synchronized to my machine, but feel free to leave it disabled if you prefer.

[[file:images/leanpub-create-book.png]]

After you create the book, Leanpub shows you a "Getting Started" page which describes some additional steps you need to complete to finish setting up your book and its integration with your git repository.

[[file:images/leanpub-getting-started-screen.png]]

Make sure you follow these instructions, which include:

- Adding Leanpub as a collaborator to your GitHub or BitBucket repository. This makes it possible for Leanpub to read the files from your repository to render the book.

  [[file:images/github-add-collaborator.png]]
- Adding a webhook to your repository to trigger an automatic preview of your book whenever you push new changes to your repository. This is an optional step, but one which makes it much easier to generate the book whenever you make changes. Not this this "hardcodes" the type of book generation (Preview or Publish) which happens when you push changes. For a more complex setup, see [[#ci-cd-for-previewing-and-publishing][CI/CD for previewing and publishing]].

  [[file:images/github-add-webhook.png]]

  #+begin_warning
Leanpub's "Edit Webhook" page includes your real Leanpub API key, which you should keep secret, as it enables access to all operations on your book.
  #+end_warning

** Your first book preview

Once you have created your book on Leanpub and connected it to your Git repository, you are ready to produce your first preview. Follow the same steps shown in [[#your-first-book-export][Your first book export]] to generate the Markua files from your Org file, and then commit and push the changes to your repository.

#+begin_src console
$ cd ~/Personal/writing/emacs-org-leanpub
$ git add .
$ git ci -m 'Commit for first book Preview'
[master edc3c97] Commit for first book Preview
 7 files changed, 80 insertions(+), 9 deletions(-)
$ git push
Enumerating objects: 19, done.
Counting objects: 100% (19/19), done.
Writing objects: 100% (12/12), 1.32 MiB | 1.28 MiB/s, done.
To https://github.com/zzamboni/emacs-org-leanpub.git
   00a67a1..edc3c97  master -> master
#+end_src

If you configured the webhook in the previous steps, the =git push= will automatically trigger a book preview. If you did not, you can visit the Preview page of your book at =https://leanpub.com/<your-book-id>/preview= and clicking on the "Create Preview" button.  In any case, after a few minutes you will get an email from Leanpub telling you about the preview creation.

[[file:images/leanpub-preview-email.png]]

If you enabled Dropbox integration, the generated preview files of your book will be automatically added to your Dropbox folder, and you can also download them from the Preview page of your book.

*Congratulations!* You have executed the first end-to-end production of your book, and you can now hold in your hands (or in your PDF viewer, at least) the very first copy of your book. Read on to learn

** Additional book configuration

Leanpub offers you a great degree of control over all aspects of your books aspect and production. All of them are optional, so you can do them as you explore and feel more comfortable. I highly recommend that you explore your book's management menu in Leanpub.

[[file:images/leanpub-book-menu.png]]

Here are some of the common things that I like to configure:

- Visual settings :: Found in /Settings/ / /Book Theme/. You can choose one of the ready-made themes as chosen when you created the book (Business, Technical, Fiction) but I like to choose "Custom" and fine-tune the different parameters. You can customize the page size, fonts, line spacing, line numbering in code blocks, and many other things. I recommend you set at least the page size you want before creating a cover for your book, since it determines the size of the image you have to upload. But otherwise, feel free to experiment, preview your book with different settings and choose the look you like best.
- Cover :: Found in /Settings/ / /Upload Book Cover/. This is perhaps one of the most important visual aspects you'll want to configure to make sure your book stands out. You can upload an image to use as your book cover, although the page also notes that if you do not upload an image, you can also set the cover of your book by storing an image called =title_page.png= or =title_page.jpg= inside your =images= folder. The size of the image depends on the page size of your book.
- Title and subtitle :: Found in the /Book Info/ / /Book Details/ page. You can modify the title you specified during book creation, and optionally add a subtitle.
- Categories :: Found in /Book Info/ / /Categories/. Allows you to define certain categories for your book, to make them easier to find by readers.

* TODO The workflow
:PROPERTIES:
:EXPORT_FILE_NAME: manuscript/the-workflow.markua
:END:

** Writing

** Exporting

** Previewing

** Publishing

* TODO Automation
:PROPERTIES:
:EXPORT_FILE_NAME: manuscript/automation.markua
:END:

** CI/CD for previewing and publishing
:PROPERTIES:
:CUSTOM_ID:       ci-cd-for-previewing-and-publishing
:END:

*** Basic concepts

*** Example: Using CircleCI

*** Example: Using GitHub Actions

** Triggering and monitoring book builds

*** From the command line

*** Using Hammerspoon

* TODO Tips and tricks
:PROPERTIES:
:EXPORT_FILE_NAME: manuscript/tips-and-tricks.markua
:END:

** org-special-ctrl-a/e/k

** Visual configuration

** Code block execution and output processing (like in this book)

* Colophon :backmatter:
:PROPERTIES:
:EXPORT_FILE_NAME: manuscript/colophon.markua
:END:

This book was written completely in GNU Emacs 26.3 using Org mode version 9.3.7. The text is exported to Leanpub Markua format and structure using the =ox-leanpub= package, and published using Leanpub.

Cover photo by [[https://www.pexels.com/photo/background-book-stack-books-close-up-1148399/][Sharon McCutcheon]] from Pexels.

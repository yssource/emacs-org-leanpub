#+startup: indent logdrawer
#+tags: noexport sample frontmatter mainmatter backmatter
#+options: toc:nil tags:nil
#+todo: TODO(t) DRAFT(f@/!) | DONE(d!) CANCELED(c)

# This block is used to clean up source blocks that get executed
# through the script command, for the purposes of including both the
# commands and their output in the export. This is to be used through
# the :post argument in a src block, like this:
# #+begin_src sh :exports output :wrap "src console" :post cleanup(data=*this*)
# script <<EOF
#   echo 1
#   echo 2
#   more commands
# EOF
# #+end_src

#+NAME: cleanup
#+BEGIN_SRC emacs-lisp :var data="" :results value :exports none
  (replace-regexp-in-string
   "\\$ exit\\(.\\|\n\\)*$" ""
   (replace-regexp-in-string
    "^bash-.*\\$" "$"
    (replace-regexp-in-string
     "\\(\\(.\\|\n\\)*?\\)\\$\\(.\\|\n\\)*\\'" ""
     (replace-regexp-in-string "" "" data) nil nil 1)))
#+END_SRC

#+title: Writing and publishing with Emacs, org-mode and Leanpub
#+author: Diego Zamboni

* Introduction
:PROPERTIES:
:EXPORT_FILE_NAME: manuscript/introduction.markua
:END:

Publishing your words has never been easier than it is today. For a long time, getting a book published was a long and arduous process, in which you had to go through multiple gatekeepers to even have a chance to see your words on paper. Today, blogging means you can have your words read by thousands of people within minutes of writing them. Even publishing a book has become considerably easier through self publishing. There are many tools and publishers that allow you to get started for little or no money. Still, *getting started* can still be confusing, and this is what this book is about.

In this book, I will show you the workflow and tools I use to publish [[https://leanpub.com/u/zzamboni][my books]]. This toolset is geared towards technical writing, which is what I do, but can just as well be used for any other style. The two main tools involved are:

- The [[https://www.gnu.org/software/emacs/][GNU Emacs]] editor together with  [[https://orgmode.org/][Org mode]]  for writing, editing and exporting your text;
- [[https://leanpub.com/][Leanpub]] for typesetting, previewing, publishing and selling your work.

The following are optional, but highly recommended for making the workflow more automated and consistent:

- [[https://circleci.com/][CircleCI]] (or other CI/CD tool) for automating the typesetting, previewing and publication process;
- [[http://www.hammerspoon.org/][Hammerspoon]] (if you are using a Mac) for monitoring book builds.

To illustrate the process and provide you with a starting point, the source repository for this book is available at https://github.com/zzamboni/emacs-org-leanpub. I am populating the repository live as I write this book, and you can follow the progress there and by getting the book for free at https://leanpub.com/emacs-org-leanpub. In the repository you can see all the "behind the scenes" text and configuration, and follow along as I describe them to you.

There are as many possible variations to this workflow as users out there. If you have any suggestions or tips that you think should be mentioned, please feel free to let me know! Send me a note or even better, submit a pull request at the book's Github repository. Let's make the book better together!

** The process

The high-level workflow for publishing a book using Emacs, org-mode and Leanpub looks like this:

#+begin_src dot :file "./images/high-level-workflow.png"
  digraph {
     rankdir=LR;
     files                [label="Source files\n(org file, figures, etc.)", fillcolor=green, style=filled, shape=oval];
     emacs                [label="Emacs + org-mode", fillcolor=green, style=filled, shape=box];
     manuscript           [label="Leanpub manuscript\n(Markua + other files)", fillcolor=yellow, style=filled, shape=box];
     leanpub              [label="Leanpub", fillcolor=blue, style=filled, shape=box];
     github               [label="GitHub", fillcolor=red, style=filled, shape=box];
     book                 [label="Book (PDF,\nePub, mobi, online)", shape=none];
     files -> emacs       [label="Edit"];
     emacs -> manuscript  [label="Export"];
     manuscript -> github [label="Commit"];
     github -> leanpub    [label="Typeset"];
     leanpub -> book      [label="Publish"];
     leanpub -> emacs     [label="Preview"];
  }
#+end_src

#+RESULTS:
[[file:./images/high-level-workflow.png]]

In this setup, the only files you manipulates directly are your source files. For your text, you use Emacs with org-mode. In many cases, you can also generate figures from within Org mode, if they can be programmatically produced. Emacs exports your Org files into the structure and format required by Leanpub, and you commit the result to Github. From there, Leanpub picks up the files and produces a preview of your book, which you can review to make further changes. When you want to publish your work, you instruct Leanpub to do so, and Leanpub takes care of producing the end result and publishing it for the word to see.

** Leanpub

** Emacs and org-mode

* TODO Setting up
:PROPERTIES:
:EXPORT_FILE_NAME: manuscript/setting-up.markua
:END:

** Signing up for Leanpub

** Emacs and org-mode configuration

** Creating a repository and a book skeleton

#+begin_note
All the steps that follow show the actual commands and operations I performed while setting up the book you are reading!
#+end_note

The first step is to choose a short name or /slug/ for your book. This is the URL identifier for your book in Leanpub, and it should also be the name of your git repository (this is not mandatory, but makes the automation easier). This book's slug is =emacs-org-leanpub=, so its Leanpub URL will be leanpub.com/emacs-org-leanpub.

Once we have a slug, we create a new Git repository for the new book. Leanpub supports both Github and Bickbucket repositories. In these descriptions I use Github, but similar steps apply if you are using Bitbucket.

#+begin_tip
I use the command-line utility [[https://hub.github.com/][hub]] to interact with Github from the command line. You can of course do the corresponding operations through the Github web interface if you so prefer. If you use Bitbucket, you can use [[https://seveas.github.io/git-spindle/bitbucket.html][git-spindle]] to interact with it from the command line as well.
#+end_tip

#+begin_src sh :exports output :results output :wrap "src console" :post cleanup(data=*this*)
script <<EOF
cd ~/Personal/writing
mkdir -p emacs-org-leanpub
cd emacs-org-leanpub
git init .
EOF
#+end_src

#+RESULTS:
#+begin_src console
$ cd ~/Personal/writing
$ mkdir -p emacs-org-leanpub
$ cd emacs-org-leanpub
$ git init .
Initialized empty Git repository in /Users/taazadi1/Dropbox/Personal/writing/emacs-org-leanpub/.git/
#+end_src

Next, we create a new Github repository and connect it to our local repository:

#+begin_src  sh :exports output :results output :wrap "src console" :post cleanup(data=*this*)
script <<EOF
cd ~/Personal/writing/emacs-org-leanpub
hub create
git remote -v
EOF
#+end_src

#+RESULTS:
#+begin_src console
$ cd ~/Personal/writing/emacs-org-leanpub
$ hub create
Updating origin
https://github.com/zzamboni/emacs-org-leanpub
$ git remote -v
origin	https://github.com/zzamboni/emacs-org-leanpub.git (fetch)
origin	https://github.com/zzamboni/emacs-org-leanpub.git (push)
#+end_src

Now you can start writing your text inside the new repository. I usually write the main text in a file called =book.org= in the root directory of the repository.

To get you started, a basic skeleton for a book is the following:

#+begin_src org
  ,#+startup: indent
  ,#+tags: noexport sample frontmatter mainmatter backmatter
  ,#+options: toc:nil tags:nil

  ,#+title: Your book title
  ,#+author: Your name

  ,* Introduction

  Some text

  ,* Chapter 1

  Some more text
#+end_src

Once you have some text, you can simply commit and push the changes to your remote repository:

#+begin_src sh  :exports output :results output :wrap "src console" :post cleanup(data=*this*)
script <<EOF
cd ~/Personal/writing/emacs-org-leanpub
git add book.org
git ci -m "Initial commit of the book"
git push -u origin master
EOF
#+end_src

#+RESULTS:
#+begin_src console
$ cd ~/Personal/writing/emacs-org-leanpub
$ git add book.org
$ git ci -m "Initial commit of the book"
On branch master
Untracked files:
	.#book.org
	typescript

nothing added to commit but untracked files present
$ git push origin master
Enumerating objects: 3, done.
Counting objects:  33% (1/3)Counting objects:  66% (2/3)Counting objects: 100% (3/3)Counting objects: 100% (3/3), done.
Delta compression using up to 8 threads
Compressing objects:  50% (1/2)Compressing objects: 100% (2/2)Compressing objects: 100% (2/2), done.
Writing objects:  33% (1/3)Writing objects:  66% (2/3)Writing objects: 100% (3/3)Writing objects: 100% (3/3), 3.53 KiB | 3.53 MiB/s, done.
Total 3 (delta 0), reused 0 (delta 0)
To https://github.com/zzamboni/emacs-org-leanpub.git
 ,* [new branch]      master -> master
#+end_src

** Creating a new Leanpub book

* TODO The workflow
:PROPERTIES:
:EXPORT_FILE_NAME: manuscript/the-workflow.markua
:END:

** Writing

** Exporting

** Publishing

* TODO Automation
:PROPERTIES:
:EXPORT_FILE_NAME: manuscript/automation.markua
:END:

** CI/CD for previewing and publishing

*** Basic concepts

*** Example: Using CircleCI

*** Example: Using Github Actions

** Triggering and monitoring book builds

*** From the command line

*** Using Hammerspoon
